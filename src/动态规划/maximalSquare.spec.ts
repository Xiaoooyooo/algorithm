import assert from "assert";
import maximalSquare from "./maximalSquare";

describe("maximalSquare", () => {
  it("go", () => {
    assert.equal(
      maximalSquare([
        ["1", "1", "1", "0"],
        ["1", "1", "1", "0"],
        ["0", "1", "1", "0"],
        ["0", "0", "1", "1"],
        ["0", "0", "0", "1"]
      ]),
      4
    );
    assert.equal(
      maximalSquare([
        ["0", "0", "0", "1"],
        ["1", "1", "0", "1"],
        ["1", "1", "1", "1"],
        ["0", "1", "1", "1"],
        ["0", "1", "1", "1"]
      ]),
      9
    );
    assert.equal(
      maximalSquare([
        ["1", "0", "1", "0", "0"],
        ["1", "0", "1", "1", "1"],
        ["1", "1", "1", "1", "1"],
        ["1", "0", "0", "1", "0"]
      ]),
      4
    );
    assert.equal(
      maximalSquare([
        ["1", "0", "1", "0", "0"],
        ["1", "0", "1", "1", "1"],
        ["1", "1", "1", "1", "1"],
        ["1", "0", "1", "1", "1"]
      ]),
      9
    );
    assert.equal(
      maximalSquare([
        ["1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1"]
      ]),
      16
    );
    assert.equal(
      maximalSquare([
        ["1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1"],
        ["1", "1", "1", "0", "1"],
        ["1", "1", "1", "1", "1"]
      ]),
      9
    );
    assert.equal(
      maximalSquare([
        ["0", "1"],
        ["1", "0"]
      ]),
      1
    );
    assert.equal(maximalSquare([["0"]]), 0);
  });
});
